# version: 2.1

# executors:
#   node:
#     docker:
#       - image: circleci/node:13.8.0
#   python:
#     docker:
#       - image: python:3.9.0-alpine
#   aws:
#     docker:
#       - image: amazon/aws-cli

# commands:
#   destroy_environment:
#     description: Destroy Cloud Formation Stacks and infrastructure
#     parameters:
#       when:
#         type: string
#       id:
#         type: string
#     steps:
#       - run:
#           name: Destroy udapeople backend cfn stack
#           command: |
#             aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
#           environment:
#             TERM: xterm-256color
#           when: << parameters.when >>
#       - run:
#           name: Destroy udapeople frontend cfn stack and S3 bucket
#           command: |
#             aws s3 rm s3://udapeople-<< parameters.id >> --recursive
#             aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
#           environment:
#               TERM: xterm-256color
#           when: << parameters.when >>
          
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       when:
#         type: string
#       id:
#         type: string     
#     steps:
#       - run:
#           name: Revert migrations
#           working_directory: ./backend
#           command: |
#             SUCCESS=$(curl --insecure https://kvdb.io/97FvJmkzeVY4bsi7sV4AjU/DB_MIGRATION_<< parameters.id >>)
#             echo $SUCCESS
#             if [[ "$SUCCESS" == "success" ]]
#             then
#               pwd
#               ls -la
#               npm run migrations:revert
#             fi
#           when: << parameters.when >>
            
# jobs:

#   install-backend-dependencies:
#     executor: node
#     steps:
#       - checkout
#       - run:
#           name: npm install
#           working_directory: ./backend
#           command: ls -la && npm install
#       - persist_to_workspace:
#           root: .
#           paths:
#             - backend/node_modules

#   install-frontend-dependencies:
#     executor: node
#     steps:
#       - checkout
#       - run:
#           name: npm install
#           working_directory: ./frontend
#           command: ls -la && npm install 
#       - persist_to_workspace:
#           root: .
#           paths:
#             - frontend/node_modules

#   build-backend:
#     executor: node
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: npm run build
#           working_directory: ./backend
#           command: npm run build
#       - persist_to_workspace:
#           root: .
#           paths:
#             - backend/dist          
  
#   build-frontend:
#     executor: node
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: npm run build
#           working_directory: ./frontend
#           command: npm run build


#   test-frontend:
#     executor: node
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install junit coverage reporter
#           working_directory: ./frontend
#           command: npm install --save-dev jest-junit
#       - run:
#           name: Run tests with JUnit as reporter
#           working_directory: ./frontend
#           command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
#           environment:
#             JEST_JUNIT_OUTPUT_DIR: ./test_results
#       - store_test_results:
#           path: ./frontend/test_results
#       - store_artifacts:
#           path: ./frontend/test_results
                
#   test-backend:
#     executor: node
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install junit coverage reporter
#           working_directory: ./backend
#           command: npm install --save-dev jest-junit
#       - run:
#           name: Run tests with JUnit as reporter
#           working_directory: ./backend
#           command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
#           environment:
#             JEST_JUNIT_OUTPUT_DIR: ./test_results
#       - store_test_results:
#           path: ./backend/test_results
#       - store_artifacts:
#           path: ./backend/test_results
            
#   scan-frontend:
#     executor: node
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: Check Frontend against security vulnerabilities
#           working_directory: ./frontend
#           command: npm audit --audit-level=critical

#   scan-backend:
#     executor: node
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: Check Backend against security vulnerabilities
#           working_directory: ./backend
#           command: npm audit --audit-level=critical

#   deploy-infrastructure:
#     executor: aws
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: yum install -y tar gzip
#       - run:
#           name: Deploy backend infrastructure
#           working_directory: ./.circleci/files
#           command: |
#             aws cloudformation deploy \
#               --template-file backend.yml \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
#       - run:
#           name: Deploy frontend infrastructure
#           working_directory: ./.circleci/files
#           command: |
#             aws cloudformation deploy \
#               --template-file frontend.yml \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
#       - run:
#           name: Add backend ip to ansible inventory
#           working_directory: ./.circleci/ansible
#           command: |
#             echo $aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text >> inventory
#             cat inventory
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .circleci/ansible/inventory
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail    

#   configure-infrastructure:
#     executor: python
#     steps:
#       - checkout
#       - run:
#           name: Add SSH
#           command: |
#             apk add --update openssh-client git
#       - add_ssh_keys:
#           fingerprints: ["5f:fa:5f:cf:eb:ea:94:0d:4a:06:a4:cd:9f:1e:43:26"]
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible
#             ansible --version
#       - run:
#           name: Configure server
#           working_directory: ./.circleci/ansible
#           command: |
#             pwd &&
#             ls -la
#             cat inventory
#             ansible-playbook -i inventory configure-server.yaml
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail      

#   run-migrations:
#     executor: node
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install AWS CLI dependencies
#           working_directory: /tmp
#           command: |
#             sudo apt-get update && sudo apt-get install -yy less
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Run migrations
#           working_directory: ./backend
#           command: |
#             npm run migrations > migrations_dump.txt
#       - run:
#           name: Send migration results to kvdb
#           working_directory: ./backend
#           command: |
#             if grep -q "has been executed successfully" migrations_dump.txt
#             then
#               echo "DB migration was successful, will update kvdb..."
#               curl -k https://kvdb.io/97FvJmkzeVY4bsi7sV4AjU/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#             else
#               echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
#               curl -k https://kvdb.io/97FvJmkzeVY4bsi7sV4AjU/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#             fi
#             echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail    

#   deploy-frontend:
#     executor: node
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install AWS CLI dependencies
#           working_directory: /tmp
#           command: |
#             sudo apt-get update && sudo apt-get install -yy less
#             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
#             unzip awscliv2.zip
#             sudo ./aws/install
#       - run:
#           name: Rebuild frontend with backend API Url
#           # working_directory: ./frontend
#           command: |
#             export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "API_URL = ${API_URL}"
#             echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
#             cat frontend/.env
#       - run:
#           name: Deploy frontend objects to S3
#           working_directory: ./frontend
#           command: |
#             npm install
#             npm run build
#             tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
#             aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
#       - persist_to_workspace:
#           root: .
#           paths:
#             - frontend/dist
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail
#       - revert-migrations:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail     
                    
#   deploy-backend:
#     executor: python
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["5f:fa:5f:cf:eb:ea:94:0d:4a:06:a4:cd:9f:1e:43:26"]
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install dependencies
#           working_directory: /tmp
#           command: |
#             apk add --update ansible curl rsync openssh nodejs npm
#             ansible --version
#             pip install awscli
#             aws --version
#       - run:
#           name: Deploy backend
#           working_directory: ./.circleci/ansible
#           command: |
#             cat inventory
#             ansible-playbook -i inventory deploy-backend.yml -vv
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail
#       - revert-migrations:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail


#   smoke-test:
#     executor: python
#     steps:
#       - checkout
#       - attach_workspace:
#           at: .
#       - run:
#           name: Install dependencies
#           working_directory: /tmp
#           command: |
#             apk add --update curl nodejs npm
#             pip install awscli
#       - run:
#           name: Backend smoke test.
#           working_directory: ./backend
#           command: |
#             export BACKEND_IP=$(aws ec2 describe-instances \
#             --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             --filters Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
#             --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             if curl -s "${API_URL}/api/status" | grep "ok"
#             then
#               return 0
#             else
#               return 1
#             fi
#       - run:
#           name: Frontend smoke test.
#           working_directory: ./backend
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/index.html"
#             curl -s ${URL} | grep -q "Welcome"
#             if curl -s ${URL} | grep "Welcome"
#             then
#               return 0
#             else
#               return 1
#             fi
#       - destroy_environment:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail
#       - revert-migrations:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail


#   cloudfront-update:
#     executor: aws
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             yum install -y tar gzip curl
#             curl -sL https://rpm.nodesource.com/setup_10.x | bash -
#             yum install -y nodejs
#       - run:
#           name: Store old WorkflowID in memstash for cleanup phase
#           working_directory: ./.circleci/files
#           command: |
#             WorkflowID=$(aws cloudformation \
#               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#               --no-paginate --output text)
#             curl -H "Content-Type: text/plain" -H "token: 1513db3b-15be-4750-bae6-3a8d32dd6de2" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID
#       - run:
#           name: Update cloudfront distribution
#           working_directory: ./.circleci/files
#           command: |
#             aws cloudformation deploy \
#               --template-file cloudfront.yml \
#               --stack-name udapeople-cloudfront-production \
#               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople
#       - revert-migrations:
#           id: ${CIRCLE_WORKFLOW_ID:0:7}
#           when: on_fail 

#   cleanup:
#     executor: aws
#     steps:
#       - checkout
#       - run:
#           name: Clean up old environment
#           command: |
#             OldWorkflowID=$(curl -H "token: 1513db3b-15be-4750-bae6-3a8d32dd6de2" --request GET https://api.memstash.io/values/WorkflowID)
#             CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
#             if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
#             then
#               echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
#               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#             else
#               echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
#             fi
#           environment:
#             TERM: xterm-256color
            
# workflows:
#   default:
#     jobs:
#       ## BUILD AND DEPLOY
#       - install-backend-dependencies
#       - install-frontend-dependencies

#       - build-backend:
#           requires:
#             - install-backend-dependencies
#       - build-frontend:
#           requires:
#             - install-frontend-dependencies
#       - scan-backend:
#           requires:
#             - build-backend
#       - scan-frontend:
#           requires:
#             - build-frontend
#       - test-backend:
#           requires:
#             - build-backend
#       - test-frontend:
#           requires:
#             -  build-frontend

#       ## INFRASTRUCTURE
#       - deploy-infrastructure:
#           filters:
#             branches:
#               only:
#                 - master
#       - configure-infrastructure:
#           requires:
#             - deploy-infrastructure
#       - run-migrations:
#           requires:
#             - configure-infrastructure
#             - test-backend
#             - test-frontend
#             # - scan-backend
#             # - scan-frontend
#           filters:
#             branches:
#               only:
#                 - master
#       - deploy-backend:
#           requires:
#             - run-migrations
#       - deploy-frontend:
#           requires:
#             - run-migrations
#       - smoke-test:
#           requires:
#             - deploy-backend
#             - deploy-frontend
      # - cloudfront-update:
      #     requires:
      #       - smoke-test
      # - cleanup:
      #     requires:
      #       - cloudfront-update


version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string   
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
              TERM: xterm-256color
          when: << parameters.when >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string 
      when:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/97FvJmkzeVY4bsi7sV4AjU/migration_<< parameters.workflow_id >>)
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Run frontend scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Run backend scan
          command: |
            cd backend
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy frontend infrastructure
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            echo $aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail    

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - run:
          name: Add SSH
          command: |
            apk add --update openssh-client git
      - add_ssh_keys:
          fingerprints: ["5f:fa:5f:cf:eb:ea:94:0d:4a:06:a4:cd:9f:1e:43:26"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory configure-server.yaml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # - run:
      #     name: Install AWS CLI dependencies
      #     working_directory: /tmp
      #     command: |
      #       sudo apt-get update && sudo apt-get install -yy less
      #       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #       unzip awscliv2.zip
      #       sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -k https://kvdb.io/97FvJmkzeVY4bsi7sV4AjU/migration_${CIRCLE_WORKFLOW_ID:0:8}  -d '1'
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail    

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update nodejs npm tar gzip curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5f:fa:5f:cf:eb:ea:94:0d:4a:06:a4:cd:9f:1e:43:26"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Install NPM and NodeJS
          command: |
            apk add --update nodejs npm tar gzip curl
      - run:
          name: Create an Artificat.tar.gz
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: 
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

